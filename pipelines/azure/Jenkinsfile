pipeline {
    agent any
    
    environment {
        // Configurações do ACR
        ACR_NAME = 'jenkinscicdacr'
        ACR_LOGIN_SERVER = "jenkinscicrdacr.azurecr.io"
        
        // Configurações da aplicação
        APP_NAME = 'service-app'
        DOCKER_IMAGE = 'service-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        IMAGE_TAG = "${BUILD_NUMBER}"
        APP_PORT = '5001'
        APP_VERSION = "${BUILD_NUMBER}"
        
        // Configurações do Azure Container Instances
        RESOURCE_GROUP = 'jenkins-cicd-rg'
        CONTAINER_GROUP = 'jenkins-cicd-container-group'
        
        // Configurações do SonarQube
        SONAR_SERVER = 'http://52.179.3.47:9000'
        SONAR_PROJECT = 'service-app'
        
        // Configuração do workspace
        HOME = "${WORKSPACE}"
    }
    
    stages {
        stage('🔍 Verify Azure Access') {
            steps {
                echo "🔍 Verificando acesso ao Azure..."
                withCredentials([
                    string(credentialsId: 'azure-client-id', variable: 'AZURE_CLIENT_ID'),
                    string(credentialsId: 'azure-client-secret', variable: 'AZURE_CLIENT_SECRET'),
                    string(credentialsId: 'azure-tenant-id', variable: 'AZURE_TENANT_ID'),
                    string(credentialsId: 'azure-subscription-id', variable: 'AZURE_SUBSCRIPTION_ID')
                ]) {
                    script {
                        sh '''
                            echo "Testing Azure CLI access..."
                            docker run --rm \
                              -e AZURE_TENANT_ID="${AZURE_TENANT_ID}" \
                              -e AZURE_CLIENT_ID="${AZURE_CLIENT_ID}" \
                              -e AZURE_CLIENT_SECRET="${AZURE_CLIENT_SECRET}" \
                              mcr.microsoft.com/azure-cli:latest \
                              sh -c "az login --service-principal -u ${AZURE_CLIENT_ID} -p ${AZURE_CLIENT_SECRET} --tenant ${AZURE_TENANT_ID} && az account show"
                        '''
                    }
                }
            }
        }
        
        stage('📋 Checkout & Prepare') {
            steps {
                echo "📋 Preparing workspace..."
                script {
                    sh '''
                        echo "Current directory structure:"
                        ls -la
                        if [ -d "service-app" ]; then
                            echo "service-app directory found"
                            ls -la service-app/
                        else
                            echo "service-app directory not found, checking for Dockerfile in root"
                            if [ -f "Dockerfile" ]; then
                                echo "Dockerfile found in root directory"
                            else
                                echo "No Dockerfile found!"
                                exit 1
                            fi
                        fi
                    '''
                }
            }
        }
        
        stage('📊 Code Analysis') {
            steps {
                echo "Executando análise de código com SonarQube..."
                withSonarQubeEnv('SonarQube') {
                    script {
                        // Ajustar diretório baseado na estrutura do projeto
                        def sourceDir = fileExists('service-app') ? 'service-app' : '.'
                        
                        dir(sourceDir) {
                            sh '''
                                # Verificar e criar diretório para o scanner
                                mkdir -p "${WORKSPACE}/sonar-scanner"
                                
                                # Baixar o SonarScanner se não existir
                                if [ ! -f "${WORKSPACE}/sonar-scanner/sonar-scanner-cli-4.8.0.2856-linux/bin/sonar-scanner" ]; then
                                    echo "Baixando SonarScanner..."
                                    curl -L -o "${WORKSPACE}/sonar-scanner-cli.zip" https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
                                    
                                    # Descompactar
                                    unzip -q -o "${WORKSPACE}/sonar-scanner-cli.zip" -d "${WORKSPACE}/sonar-scanner"
                                    
                                    # Tornar o binário executável
                                    chmod +x "${WORKSPACE}/sonar-scanner/sonar-scanner-"*/bin/sonar-scanner
                                fi
                            '''
                            
                            // Criar o arquivo de propriedades do SonarQube
                            sh '''
                                # Criar arquivo sonar-project.properties
                                cat > sonar-project.properties << EOL
                                # Identificação do projeto
                                sonar.projectKey=${SONAR_PROJECT}
                                sonar.projectName=Service App
                                sonar.projectVersion=${APP_VERSION}

                                # Configurações do servidor
                                sonar.host.url=${SONAR_SERVER}

                                # Caminho para os arquivos de código
                                sonar.sources=.
                                sonar.python.coverage.reportPaths=coverage.xml
                                sonar.python.xunit.reportPath=test-results.xml

                                # Codificação do código-fonte
                                sonar.sourceEncoding=UTF-8
                                EOL
                            '''
                            
                            // Executar o SonarScanner com o token
                            withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
                                sh '''
                                    # Exibir informações de debug
                                    echo "Diretório atual: $(pwd)"
                                    echo "Listando arquivos:"
                                    ls -la
                                    
                                    echo "Conteúdo do arquivo sonar-project.properties:"
                                    cat sonar-project.properties
                                    
                                    # Executar o SonarScanner
                                    echo "Executando SonarScanner..."
                                    "${WORKSPACE}/sonar-scanner/sonar-scanner-"*/bin/sonar-scanner \
                                    -Dsonar.login="${SONAR_TOKEN}" \
                                    -Dsonar.projectBaseDir=$(pwd) \
                                    -Dsonar.verbose=true
                                    
                                    # Verificar se o relatório foi gerado
                                    echo "Verificando arquivos gerados:"
                                    find . -name "report-task.txt" -type f
                                    
                                    # Copiar report-task.txt se encontrado
                                    if [ -f .scannerwork/report-task.txt ]; then
                                        echo "Copiando report-task.txt..."
                                        cp .scannerwork/report-task.txt "${WORKSPACE}/"
                                        echo "Conteúdo do report-task.txt:"
                                        cat "${WORKSPACE}/report-task.txt"
                                    fi
                                '''
                            }
                        }
                    }
                }
            }
        }
    }
    
    // post {
    //     always {
    //         echo "🧹 Cleaning up..."
            
    //         // Arquivar artefatos
    //         archiveArtifacts artifacts: '*.json, *.txt, **/report-task.txt', allowEmptyArchive: true
            
    //         // Limpar imagens locais para economizar espaço
    //         sh """
    //             docker rmi ${APP_NAME}:${IMAGE_TAG} || true
    //             docker rmi ${ACR_LOGIN_SERVER}/${APP_NAME}:${IMAGE_TAG} || true
    //             docker rmi ${ACR_LOGIN_SERVER}/${APP_NAME}:latest || true
    //             docker system prune -f || true
    //         """
    //     }
        
    //     success {
    //         echo "🎉 Pipeline executado com sucesso!"
            
    //         // Notificar sucesso
    //         sh """
    //             echo "✅ Deployment Success - Build ${BUILD_NUMBER}" > success_notification.txt
    //             echo "Application URL: http://${CONTAINER_GROUP}.eastus.azurecontainer.io:8000" >> success_notification.txt
    //             echo "ACR Image: ${ACR_LOGIN_SERVER}/${APP_NAME}:${IMAGE_TAG}" >> success_notification.txt
    //             echo "SonarQube: ${SONAR_SERVER}/dashboard?id=${SONAR_PROJECT}" >> success_notification.txt
    //         """
    //     }
        
    //     failure {
    //         echo "❌ Pipeline falhou!"
            
    //         // Notificar falha
    //         sh """
    //             echo "❌ Deployment Failed - Build ${BUILD_NUMBER}" > failure_notification.txt
    //             echo "Check logs for details" >> failure_notification.txt
    //         """
    //     }
        
    //     unstable {
    //         echo "⚠️ Pipeline instável - verifique os alertas"
            
    //         // Notificar instabilidade
    //         sh """
    //             echo "⚠️ Deployment Unstable - Build ${BUILD_NUMBER}" > unstable_notification.txt
    //             echo "Pipeline completed with warnings" >> unstable_notification.txt
    //             echo "Check SonarQube quality gate results" >> unstable_notification.txt
    //         """
    //     }
    // }
}