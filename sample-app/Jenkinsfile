pipeline {
    agent any
    
    environment {
        AWS_REGION = 'us-east-1'
        ECR_REPOSITORY = '047447425887.dkr.ecr.us-east-1.amazonaws.com/jenkins-cicd-dev'
        DOCKER_IMAGE = 'sample-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        APP_PORT = '5001'
        APP_VERSION = "${BUILD_NUMBER}"
        ECS_CLUSTER = 'jenkins-cicd-dev'
        ECS_SERVICE = 'jenkins-cicd-dev'
        SONAR_SERVER = 'http://35.171.200.117:9000'
        SONAR_PROJECT = 'sample-app'
        HOME = "${WORKSPACE}"
    }
    
    stages {
        stage('Prepare AWS CLI Container') {
            steps {
                echo "Preparando container AWS CLI..."
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_KEY')
                ]) {
                    // Criar arquivo de script para executar comandos AWS
                    sh """
                    cat > ${WORKSPACE}/aws-cli.sh << 'EOL'
                        #!/bin/bash
                        # Script para executar AWS CLI em um container Docker

                        # O primeiro argumento é o comando AWS a ser executado
                        AWS_COMMAND="\$@"

                        # Executar o comando AWS dentro do container
                        docker run --rm \
                        -e AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY}" \
                        -e AWS_SECRET_ACCESS_KEY="${AWS_SECRET_KEY}" \
                        -e AWS_DEFAULT_REGION="${AWS_REGION}" \
                        -v \$(pwd):/workspace \
                        --workdir /workspace \
                        amazon/aws-cli:latest \
                        \$AWS_COMMAND
                    EOL
                    
                    chmod +x ${WORKSPACE}/aws-cli.sh
                    """
                    
                    // Testar o script
                    sh "sudo ${WORKSPACE}/aws-cli.sh --version"
                    sh "sudo ${WORKSPACE}/aws-cli.sh sts get-caller-identity || (echo 'Falha na configuração AWS' && exit 1)"
                }
            }
        }
        
        stage('Code Analysis') {
            when {
                expression { return false } // Desabilitado temporariamente
            }
            steps {
                withSonarQubeEnv('SonarQube') {
                    dir('sample-app') {
                        sh '''
                        echo "Executando análise de código com SonarQube..."
                        # Verificar se sonar-scanner está instalado
                        which sonar-scanner || echo "Sonar Scanner não disponível"
                        
                        # Criar arquivo sonar-project.properties
                        cat > sonar-project.properties << EOL
                        # Identificação do projeto
                        sonar.projectKey=sample-app
                        sonar.projectName=Sample App
                        sonar.projectVersion=${APP_VERSION}

                        # Caminho para os arquivos de código
                        sonar.sources=.
                        sonar.python.coverage.reportPaths=coverage.xml
                        sonar.python.xunit.reportPath=test-results.xml

                        # Codificação do código-fonte
                        sonar.sourceEncoding=UTF-8
                        EOL
                        
                        # Tentar executar análise
                        sonar-scanner || echo "Falha ao executar o Sonar Scanner"
                        '''
                    }
                }
            }
        }

        stage('Build and Test') {
            steps {
                script {
                    echo "Iniciando build e teste da aplicação..."
                    dir('sample-app') {
                        sh '''
                        # Verificar se o Dockerfile existe
                        if [ ! -f Dockerfile ]; then
                            echo "ERRO: Dockerfile não encontrado"
                            exit 1
                        fi
                        
                        echo "Construindo imagem Docker: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                        # Build imagem
                        docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} \
                            --build-arg PORT=${APP_PORT} \
                            --build-arg VERSION=${APP_VERSION} .
                        
                        # Verificar se há container de teste anterior e remover
                        docker rm -f test-container-${BUILD_NUMBER} 2>/dev/null || true
                        
                        echo "Iniciando container de teste"
                        # Testar container - expor porta corretamente para o host
                        docker run -d --name test-container-${BUILD_NUMBER} \
                            -p ${APP_PORT}:${APP_PORT} \
                            -e PORT=${APP_PORT} \
                            -e APP_VERSION=${APP_VERSION} \
                            ${DOCKER_IMAGE}:${DOCKER_TAG}
                        
                        # Aguardar inicialização
                        echo "Aguardando inicialização (10s)..."
                        sleep 10
                        
                        # Testar com endereço do host
                        echo "Testando endpoint de saúde..."
                        curl -v http://localhost:${APP_PORT}/health
                        if [ $? -ne 0 ]; then
                            echo "ERRO: Teste de saúde falhou"
                            docker logs test-container-${BUILD_NUMBER}
                            exit 1
                        else
                            echo "Teste de saúde passou com sucesso!"
                        fi
                        
                        # Limpar
                        docker stop test-container-${BUILD_NUMBER} || true
                        docker rm test-container-${BUILD_NUMBER} || true
                        '''
                    }
                }
            }
        }
        
        stage('Push to ECR') {
            steps {
                echo "Enviando imagem para ECR..."
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_KEY')
                ]) {
                    sh '''
                    # Obter token de login do ECR usando nosso wrapper
                    ECR_TOKEN=$(${WORKSPACE}/aws-cli.sh ecr get-login-password --region ${AWS_REGION})
                    
                    # Login no ECR
                    echo $ECR_TOKEN | docker login --username AWS --password-stdin ${ECR_REPOSITORY%/*}
                    
                    echo "Marcando e enviando imagem..."
                    # Tag e push
                    docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${ECR_REPOSITORY}:${DOCKER_TAG}
                    docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${ECR_REPOSITORY}:latest
                    
                    docker push ${ECR_REPOSITORY}:${DOCKER_TAG} || (echo "Falha ao enviar imagem para ECR" && exit 1)
                    docker push ${ECR_REPOSITORY}:latest || (echo "Falha ao enviar tag latest para ECR" && exit 1)
                    
                    echo "Imagem enviada com sucesso para o ECR!"
                    '''
                }
            }
        }
        
        stage('Deploy to ECS') {
            steps {
                echo "Implantando no ECS..."
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_KEY')
                ]) {
                    sh '''
                    echo "Atualizando serviço ECS: ${ECS_SERVICE} no cluster ${ECS_CLUSTER}"
                    
                    # Atualizar serviço ECS usando nosso wrapper
                    ${WORKSPACE}/aws-cli.sh ecs update-service \
                        --cluster ${ECS_CLUSTER} \
                        --service ${ECS_SERVICE} \
                        --force-new-deployment \
                        --region ${AWS_REGION}
                    
                    echo "Aguardando estabilização do serviço ECS..."
                    
                    # Em vez de esperar por "services-stable", vamos verificar o status manualmente
                    # pois o "wait" pode não funcionar bem no container
                    for i in {1..20}; do
                        echo "Verificando status do serviço (tentativa $i/20)..."
                        SERVICE_STATUS=$(${WORKSPACE}/aws-cli.sh ecs describe-services \
                            --cluster ${ECS_CLUSTER} \
                            --services ${ECS_SERVICE} \
                            --region ${AWS_REGION} \
                            --query 'services[0].deployments' \
                            --output json)
                        
                        # Se houver apenas uma implantação ativa, o serviço está estável
                        PRIMARY_COUNT=$(echo $SERVICE_STATUS | grep -o '"status": "PRIMARY"' | wc -l)
                        if [ "$PRIMARY_COUNT" == "1" ]; then
                            echo "Serviço estável com uma implantação primária!"
                            break
                        fi
                        
                        echo "Serviço ainda em implantação, aguardando 30s..."
                        sleep 30
                    done
                    
                    echo "Implantação concluída!"
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo "Limpando recursos..."
            sh 'docker image prune -f || true'
        }
        success {
            echo "Pipeline executado com sucesso! Versão ${APP_VERSION} implantada."
            echo "Aplicação disponível em: http://jenkins-cicd-dev-alb-2039113869.us-east-1.elb.amazonaws.com"
        }
        failure {
            echo "Pipeline falhou! Verifique os logs acima para detalhes."
        }
    }
}