pipeline {
    agent any
    
    environment {
        AWS_REGION = 'us-east-1'
        ECR_REPOSITORY = '047447425887.dkr.ecr.us-east-1.amazonaws.com/jenkins-cicd-dev'
        ECS_CLUSTER = 'jenkins-cicd-dev'
        ECS_SERVICE = 'jenkins-cicd-dev'
        DOCKER_IMAGE = 'sample-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        GITHUB_CREDENTIALS = 'github-credentials'
        APP_PORT = '5001'
        APP_VERSION = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Environment Check') {
            steps {
                sh '''
                echo "Verificando ambiente..."
                python3 --version
                which python3
                which docker || echo "Docker não encontrado!"
                which aws || echo "AWS CLI não encontrado!"
                ls -la
                '''
            }
        }
        
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Setup Python') {
            steps {
                sh '''
                # Instalar venv se necessário
                sudo apt update || true
                sudo apt install -y python3-venv python3-pip || true
                '''
            }
        }
        
        stage('Test Python') {
            steps {
                dir('sample-app') {
                    sh '''
                    # Verificar primeiro se temos o arquivo requirements.txt
                    ls -la
                    
                    # Criar ambiente virtual com tratamento de erro
                    python3 -m venv venv || python3 -m virtualenv venv || echo "Falha ao criar venv"
                    
                    # Ativar ambiente
                    . venv/bin/activate || echo "Falha ao ativar venv"
                    
                    # Instalar dependências
                    pip install -r requirements.txt || echo "Falha ao instalar dependências"
                    
                    # Executar testes
                    python -m pytest test_app.py -v || true
                    '''
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir('sample-app') {
                    sh '''
                    # Verificar Docker
                    sudo docker --version || echo "Docker não encontrado!"
                    
                    # Construir imagem
                    sudo docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} \
                        --build-arg PORT=${APP_PORT} \
                        --build-arg VERSION=${APP_VERSION} .
                    '''
                }
            }
        }
        
        stage('Test Container') {
            steps {
                script {
                    sh '''
                    # Executar container
                    sudo docker run -d --name test-container-${BUILD_NUMBER} \
                        -p ${APP_PORT}:${APP_PORT} \
                        -e PORT=${APP_PORT} \
                        -e APP_VERSION=${APP_VERSION} \
                        ${DOCKER_IMAGE}:${DOCKER_TAG} || echo "Falha ao executar container"
                    
                    # Aguardar inicialização
                    sleep 10
                    
                    # Testar endpoint
                    curl -f http://localhost:${APP_PORT}/health || echo "Falha no teste de health"
                    
                    # Limpar
                    sudo docker stop test-container-${BUILD_NUMBER} || true
                    sudo docker rm test-container-${BUILD_NUMBER} || true
                    '''
                }
            }
        }
        
        stage('Push to ECR') {
            steps {
                script {
                    sh '''
                    # Verificar AWS CLI
                    aws --version || echo "AWS CLI não encontrado!"
                    
                    # Login no ECR
                    aws ecr get-login-password --region ${AWS_REGION} | sudo docker login --username AWS --password-stdin ${ECR_REPOSITORY%/*}
                    
                    # Tag e push
                    sudo docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${ECR_REPOSITORY}:${DOCKER_TAG}
                    sudo docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${ECR_REPOSITORY}:latest
                    
                    sudo docker push ${ECR_REPOSITORY}:${DOCKER_TAG}
                    sudo docker push ${ECR_REPOSITORY}:latest
                    '''
                }
            }
        }
        
        stage('Deploy to ECS') {
            steps {
                script {
                    sh '''
                    # Atualizar serviço ECS
                    aws ecs update-service \
                        --cluster ${ECS_CLUSTER} \
                        --service ${ECS_SERVICE} \
                        --force-new-deployment \
                        --region ${AWS_REGION}
                    
                    # Aguardar deploy
                    aws ecs wait services-stable \
                        --cluster ${ECS_CLUSTER} \
                        --services ${ECS_SERVICE} \
                        --region ${AWS_REGION}
                    '''
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
            sh 'sudo docker image prune -f || true'
        }
        success {
            echo "Pipeline executado com sucesso! Versão ${APP_VERSION} implantada."
            echo "Aplicação disponível em: http://jenkins-cicd-dev-alb-2039113869.us-east-1.elb.amazonaws.com"
        }
        failure {
            echo 'Pipeline falhou! Verifique os logs.'
        }
    }
}