pipeline {
    agent any
    
    environment {
        AWS_REGION = 'us-east-1'
        ECR_REPOSITORY = '047447425887.dkr.ecr.us-east-1.amazonaws.com/jenkins-cicd-dev'
        DOCKER_IMAGE = 'sample-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        APP_PORT = '5001'
        APP_VERSION = "${BUILD_NUMBER}"
        ECS_CLUSTER = 'jenkins-cicd-dev'
        ECS_SERVICE = 'jenkins-cicd-dev'
        SONAR_SERVER = 'http://35.171.200.117:9000'
        SONAR_PROJECT = 'sample-app'
        HOME = "${WORKSPACE}"
        PATH = "$PATH:/usr/local/bin"
    }
    
    stages {
        stage('Install AWS CLI') {
            steps {
                echo "Instalando AWS CLI..."
                sh '''
                # Verificar se AWS CLI já está instalado
                which aws && aws --version && echo "AWS CLI já instalado" && exit 0
                
                # Instalar AWS CLI globalmente para o usuário Jenkins
                echo "Instalando AWS CLI..."
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip -o awscliv2.zip
                sudo ./aws/install --update
                
                # Verificar instalação
                which aws
                aws --version
                
                # Se não conseguir instalar globalmente, instalar localmente
                if [ $? -ne 0 ]; then
                    echo "Instalando AWS CLI localmente..."
                    ./aws/install -i ${WORKSPACE}/aws-cli -b ${WORKSPACE}/aws-cli/bin
                    export PATH=${WORKSPACE}/aws-cli/bin:$PATH
                    echo "export PATH=${WORKSPACE}/aws-cli/bin:$PATH" > ${WORKSPACE}/aws-path.sh
                    chmod +x ${WORKSPACE}/aws-path.sh
                    
                    # Verificar instalação local
                    source ${WORKSPACE}/aws-path.sh
                    aws --version
                fi
                '''
            }
        }
        
        stage('Setup AWS Config') {
            steps {
                echo "Configurando AWS CLI..."
                sh '''
                # Se temos um script de path, carregamos
                if [ -f "${WORKSPACE}/aws-path.sh" ]; then
                    source ${WORKSPACE}/aws-path.sh
                fi
                
                # Limpar configurações anteriores
                rm -rf ${WORKSPACE}/.aws 2>/dev/null || true
                mkdir -p ${WORKSPACE}/.aws
                
                # Criar arquivo de configuração
                cat > ${WORKSPACE}/.aws/config << EOL
                [default]
                region = ${AWS_REGION}
                output = json
                EOL
                
                # Verificar localização do AWS CLI
                which aws || echo "AWS CLI não encontrado no PATH"
                '''
            }
        }
        
        stage('Setup AWS Credentials') {
            steps {
                echo "Configurando credenciais AWS..."
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_KEY')
                ]) {
                    sh '''
                    # Se temos um script de path, carregamos
                    if [ -f "${WORKSPACE}/aws-path.sh" ]; then
                        source ${WORKSPACE}/aws-path.sh
                    fi
                    
                    # Criar arquivo de credenciais
                    cat > ${WORKSPACE}/.aws/credentials << EOL
                    [default]
                    aws_access_key_id = ${AWS_ACCESS_KEY}
                    aws_secret_access_key = ${AWS_SECRET_KEY}
                    EOL
                    
                    # Também exportamos como variáveis de ambiente
                    echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY}" > ${WORKSPACE}/aws-env.sh
                    echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_KEY}" >> ${WORKSPACE}/aws-env.sh
                    echo "export AWS_DEFAULT_REGION=${AWS_REGION}" >> ${WORKSPACE}/aws-env.sh
                    echo "export AWS_CONFIG_FILE=${WORKSPACE}/.aws/config" >> ${WORKSPACE}/aws-env.sh
                    echo "export AWS_SHARED_CREDENTIALS_FILE=${WORKSPACE}/.aws/credentials" >> ${WORKSPACE}/aws-env.sh
                    
                    # Se temos um script de path, adicionamos
                    if [ -f "${WORKSPACE}/aws-path.sh" ]; then
                        cat ${WORKSPACE}/aws-path.sh >> ${WORKSPACE}/aws-env.sh
                    fi
                    
                    chmod +x ${WORKSPACE}/aws-env.sh
                    
                    # Testar configuração
                    source ${WORKSPACE}/aws-env.sh
                    aws --version
                    aws sts get-caller-identity || echo "Falha na autenticação AWS"
                    '''
                }
            }
        }
        
        stage('Code Analysis') {
            when {
                expression { return false } // Desabilitado temporariamente
            }
            steps {
                withSonarQubeEnv('SonarQube') {
                    dir('sample-app') {
                        sh '''
                        echo "Executando análise de código com SonarQube..."
                        # Verificar se sonar-scanner está instalado
                        which sonar-scanner || echo "Sonar Scanner não disponível"
                        
                        # Criar arquivo sonar-project.properties
                        cat > sonar-project.properties << EOL
                        # Identificação do projeto
                        sonar.projectKey=sample-app
                        sonar.projectName=Sample App
                        sonar.projectVersion=${APP_VERSION}

                        # Caminho para os arquivos de código
                        sonar.sources=.
                        sonar.python.coverage.reportPaths=coverage.xml
                        sonar.python.xunit.reportPath=test-results.xml

                        # Codificação do código-fonte
                        sonar.sourceEncoding=UTF-8
                        EOL
                        
                        # Tentar executar análise
                        sonar-scanner || echo "Falha ao executar o Sonar Scanner"
                        '''
                    }
                }
            }
        }

        stage('Build and Test') {
            steps {
                script {
                    echo "Iniciando build e teste da aplicação..."
                    dir('sample-app') {
                        sh '''
                        # Verificar se o Dockerfile existe
                        if [ ! -f Dockerfile ]; then
                            echo "ERRO: Dockerfile não encontrado"
                            exit 1
                        fi
                        
                        echo "Construindo imagem Docker: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                        # Build imagem
                        docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} \
                            --build-arg PORT=${APP_PORT} \
                            --build-arg VERSION=${APP_VERSION} .
                        
                        # Verificar se há container de teste anterior e remover
                        docker rm -f test-container-${BUILD_NUMBER} 2>/dev/null || true
                        
                        echo "Iniciando container de teste"
                        # Testar container - expor porta corretamente para o host
                        docker run -d --name test-container-${BUILD_NUMBER} \
                            -p ${APP_PORT}:${APP_PORT} \
                            -e PORT=${APP_PORT} \
                            -e APP_VERSION=${APP_VERSION} \
                            ${DOCKER_IMAGE}:${DOCKER_TAG}
                        
                        # Aguardar inicialização
                        echo "Aguardando inicialização (10s)..."
                        sleep 10
                        
                        # Testar com endereço do host
                        echo "Testando endpoint de saúde..."
                        curl -v http://localhost:${APP_PORT}/health
                        if [ $? -ne 0 ]; then
                            echo "ERRO: Teste de saúde falhou"
                            docker logs test-container-${BUILD_NUMBER}
                            exit 1
                        else
                            echo "Teste de saúde passou com sucesso!"
                        fi
                        
                        # Limpar
                        docker stop test-container-${BUILD_NUMBER} || true
                        docker rm test-container-${BUILD_NUMBER} || true
                        '''
                    }
                }
            }
        }
        
        stage('Push to ECR') {
            steps {
                echo "Enviando imagem para ECR..."
                sh '''
                source ${WORKSPACE}/aws-env.sh
                
                # Verificar AWS CLI
                aws --version
                
                # Login no ECR
                echo "Fazendo login no ECR..."
                aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY%/*}
                
                echo "Marcando e enviando imagem..."
                # Tag e push
                docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${ECR_REPOSITORY}:${DOCKER_TAG}
                docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${ECR_REPOSITORY}:latest
                
                docker push ${ECR_REPOSITORY}:${DOCKER_TAG} || (echo "Falha ao enviar imagem para ECR" && exit 1)
                docker push ${ECR_REPOSITORY}:latest || (echo "Falha ao enviar tag latest para ECR" && exit 1)
                
                echo "Imagem enviada com sucesso para o ECR!"
                '''
            }
        }
        
        stage('Deploy to ECS') {
            steps {
                echo "Implantando no ECS..."
                sh '''
                source ${WORKSPACE}/aws-env.sh
                
                # Verificar AWS CLI
                aws --version
                
                echo "Atualizando serviço ECS: ${ECS_SERVICE} no cluster ${ECS_CLUSTER}"
                # Atualizar serviço ECS
                aws ecs update-service \
                    --cluster ${ECS_CLUSTER} \
                    --service ${ECS_SERVICE} \
                    --force-new-deployment \
                    --region ${AWS_REGION}
                
                echo "Aguardando estabilização do serviço ECS..."
                # Aguardar deploy
                aws ecs wait services-stable \
                    --cluster ${ECS_CLUSTER} \
                    --services ${ECS_SERVICE} \
                    --region ${AWS_REGION} || echo "Tempo excedido aguardando estabilidade do ECS"
                
                echo "Implantação concluída!"
                '''
            }
        }
    }
    
    post {
        always {
            echo "Limpando recursos..."
            sh 'docker image prune -f || true'
        }
        success {
            echo "Pipeline executado com sucesso! Versão ${APP_VERSION} implantada."
            echo "Aplicação disponível em: http://jenkins-cicd-dev-alb-2039113869.us-east-1.elb.amazonaws.com"
        }
        failure {
            echo "Pipeline falhou! Verifique os logs acima para detalhes."
        }
    }
}