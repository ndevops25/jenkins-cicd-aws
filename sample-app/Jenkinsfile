pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'sample-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        GITHUB_REPO = 'https://github.com/ndevops25/cp2-azure-jenkins.git'
        GITHUB_CREDENTIALS = 'github-credentials'
        APP_PORT = '5001'  // Nova porta conforme requisito
        APP_VERSION = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    credentialsId: GITHUB_CREDENTIALS,
                    url: GITHUB_REPO
            }
        }
        
        stage('Test Python') {
            steps {
                dir('sample-app') {
                    sh '''
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install -r requirements.txt
                    pytest test_app.py -v
                    '''
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir('sample-app') {
                    sh '''
                    docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} \
                        --build-arg PORT=${APP_PORT} \
                        --build-arg VERSION=${APP_VERSION} .
                    '''
                }
            }
        }
        
        stage('Test Docker Container') {
            steps {
                script {
                    // Executar container de teste
                    sh '''
                    docker run -d --name test-container \
                        -p ${APP_PORT}:${APP_PORT} \
                        -e PORT=${APP_PORT} \
                        -e APP_VERSION=${APP_VERSION} \
                        ${DOCKER_IMAGE}:${DOCKER_TAG}
                    '''
                    
                    // Aguardar container iniciar
                    sh 'sleep 5'
                    
                    // Testar endpoints
                    sh '''
                    curl -f http://localhost:${APP_PORT}/
                    curl -f http://localhost:${APP_PORT}/health
                    curl -f http://localhost:${APP_PORT}/info
                    '''
                    
                    // Parar e remover container de teste
                    sh '''
                    docker stop test-container
                    docker rm test-container
                    '''
                }
            }
        }
        
        stage('Deploy') {
            when {
                branch 'main'
            }
            steps {
                script {
                    // Parar container anterior se existir
                    sh '''
                    docker stop sample-app || true
                    docker rm sample-app || true
                    '''
                    
                    // Executar novo container
                    sh '''
                    docker run -d --name sample-app \
                        -p ${APP_PORT}:${APP_PORT} \
                        -e PORT=${APP_PORT} \
                        -e APP_VERSION=${APP_VERSION} \
                        -e ENVIRONMENT=production \
                        --restart unless-stopped \
                        ${DOCKER_IMAGE}:${DOCKER_TAG}
                    '''
                    
                    // Verificar se está rodando
                    sh 'sleep 3'
                    sh 'docker ps | grep sample-app'
                }
            }
        }
    }
    
    post {
        always {
            // Limpar workspace
            cleanWs()
            
            // Limpar imagens antigas
            sh 'docker image prune -f || true'
        }
        success {
            echo "Pipeline executado com sucesso! Versão ${APP_VERSION} implantada."
            echo "Aplicação disponível em: http://localhost:${APP_PORT}"
        }
        failure {
            echo 'Pipeline falhou! Verifique os logs.'
        }
    }
}